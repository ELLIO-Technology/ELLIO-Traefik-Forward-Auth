name: CI/CD

on:
  push:
    branches: [ main, stage ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, stage ]

env:
  GO_VERSION: '1.23'
  DOCKER_REPO: elliotechnology/ellio_traefik_forward_auth
  PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go.sum

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.23'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go.sum

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

  build:
    name: Build Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: go.sum

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -ldflags="-w -s -X main.Version=test -X main.GitCommit=$(git rev-parse HEAD) -X main.BuildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" -o /tmp/forwardauth-${{ matrix.goos }}-${{ matrix.goarch }} main.go

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get build date
        id: date
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=test
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ steps.date.outputs.BUILD_DATE }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  docker-publish:
    name: Docker Build & Publish
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          # Version determination
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "DOCKER_TAGS=${{ env.DOCKER_REPO }}:${VERSION},${{ env.DOCKER_REPO }}:latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/stage ]]; then
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="stage-${SHORT_SHA}"
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "DOCKER_TAGS=${{ env.DOCKER_REPO }}:stage,${{ env.DOCKER_REPO }}:stage-${SHORT_SHA}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="main-${SHORT_SHA}"
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "DOCKER_TAGS=${{ env.DOCKER_REPO }}:main,${{ env.DOCKER_REPO }}:main-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
          
          # Git metadata
          echo "GIT_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          
          # Display what we're building
          echo "Building version: ${VERSION}"
          echo "Tags: ${DOCKER_TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.DOCKER_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.VERSION }}
            GIT_COMMIT=${{ steps.meta.outputs.GIT_COMMIT }}
            BUILD_DATE=${{ steps.meta.outputs.BUILD_DATE }}
          labels: |
            org.opencontainers.image.title=ELLIO Traefik ForwardAuth
            org.opencontainers.image.description=High-performance forward authentication server for Traefik
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.BUILD_DATE }}
            org.opencontainers.image.revision=${{ steps.meta.outputs.GIT_COMMIT }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=ELLIO Technology

      - name: Image digest
        run: |
          echo "âœ… Image successfully pushed!"
          echo "ðŸ“¦ Tags: ${{ steps.meta.outputs.DOCKER_TAGS }}"
          echo "ðŸ”– Version: ${{ steps.meta.outputs.VERSION }}"